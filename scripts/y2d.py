
import yaml
import json
y = """
clusterDomain: "cnvrg.datorama.io"
tenancy:
  enabled: "false"
  dedicatedNodes: "false"
  cnvrg:
    key: "cnvrg-taint"
    value: "true"
cnvrgApp:
  replicas: 1
  enabled: "true"
  fixpg:  "true"
  image: "cnvrg/app:master-5316-encode"
  port: "80"
  svcName: "app"
  nodePort: "30080"
  passengerMaxPoolSize: 20
  enableReadinessProbe: "true"
  initialDelaySeconds: "10"
  readinessPeriodSeconds: "25"
  readinessTimeoutSeconds: "20"
  failureThreshold: "4"
  resourcesRequestEnabled: "true"
  cpu: "2"
  memory: "4Gi"
  sidekiq:
    enabled: "true"
    split: "true"
    cpu: "2"
    memory: "4Gi"
    replicas: "2"
  searchkiq:
    enabled: "true"
    cpu: "1"
    memory: "1Gi"
    replicas: "1"
  systemkiq:
    enabled: "true"
    cpu: "500m"
    memory: "500Mi"
    replicas: "1"
  seeder:
    image: "docker.io/cnvrg/cnvrg-boot:v0.25"
    seedCmd: "rails db:migrate && rails db:seed && rails libraries:update"
  conf:
    gcpStorageSecret: "gcp-storage-secret"
    gcpKeyfileMountPath: "/tmp/gcp_keyfile"
    gcpKeyfileName: "key.json"
    jobsStorageClass: ""
    featureFlags: ""
    sentryUrl: "https://4409141e4a204282bd1f5c021e587509:dc15f684faa9479a839cf913b98b4ee2@sentry.cnvrg.io/32"
    secretKeyBase: "0d2b33c2cc19cfaa838d3c354354a18fcc92beaaa8e97889ef99341c8aaf963ad3afcf0f7c20454cabb5c573c3fc35b60221034e109f4fb651ed1415bf61e9d5"
    stsIv: "DeJ/CGz/Hkb/IbRe4t1xLg=="
    stsKey: "05646d3cbf8baa5be7150b4283eda07d"
    passengerAppEnv: "app"
    railsEnv: "app"
    runJobsOnSelfCluster: "true"
    defaultComputeConfig: "/opt/kube"
    defaultComputeName: "default"
    useStdout: "true"
    extractTagsFromCmd: "false"
    checkJobExpiration: "true"
    cnvrgStorageType: "aws"
    cnvrgStorageBucket: "cnvrg-stg"
    cnvrgStorageAccessKey: ""
    cnvrgStorageSecretKey: ""
    minioSseMasterKey: "my-minio-key:a310aadcefdb634b748ae31225f175e3f64591f955dfc66ccc20e128a6817ff9"
    cnvrgStorageAzureAccessKey: ""
    cnvrgStorageAzureAccountName: ""
    cnvrgStorageAzureContainer: ""
    cnvrgStorageRegion: "us-east-1"
    cnvrgStorageProject: ""
    customAgentTag: "false"
    intercom: "true"
    ldap:
      enabled: ""
      host: ""
      port: ""
      account: "userPrincipalName"
      base: ""
      adminUser: ""
      adminPassword: ""
      ssl: ""
    registry:
      name: "cnvrg-registry"
      url: "docker.io"
      user: "cnvrghelm"
      password: "a21c68e9-a6ca-4376-bbc5-3e98f6c65d23"
    rbac:
      role: "cnvrg-role"
      serviceAccountName: "cnvrg"
      roleBindingName: "cnvrg-role-binding"
    smtp:
      server: ""
      port: ""
      username: ""
      password: ""
      domain: ""
  hyper:
    enabled: "true"
    image: "cnvrg/hyper-server:latest"
    port: "5050"
    nodePort: "30050"
    svcName: "hyper"
    replicas: "1"
    token: "token"
    enableReadinessProbe: "true"
    readinessPeriodSeconds: "100"
    readinessTimeoutSeconds: "60"
    cpuRequest: "100m"
    memoryRequest: "200Mi"
  cnvrgRouter:
    enabled: "false"
    image: "nginx"
    svcName: "routing-service"
    nodePort: "30081"
    port: "80"
redis:
  enabled: "true"
  image: "docker.io/cnvrg/cnvrg-redis:v3.0.5.c2"
  svcName: "redis"
  port: "6379"
  limits:
    cpu: "1"
    memory: "2Gi"
  requests:
    cpu: "500m"
    memory:  "1Gi"
pg:
  enabled: "true"
  svcName: "postgres"
  image: "centos/postgresql-12-centos7"
  port: "5432"
  dbname: "cnvrg_production"
  pass: "pg_pass"
  user: "cnvrg"
  runAsUser: "26"
  runAsGroup: "26"
  fsGroup: "26"
  storageClass: "use-default"
  hugePages:
    enabled: "false"
    size: "2Mi"
    memory: ""
  cpuRequest: "2"
  memoryRequest: "4Gi"
  storageSize: "100Gi"

pgBackup:
  enabled: "false"
  name: "pg-backup"
  path: "/opt/cnvrg-backups"
  scriptPath: "/opt/script"
  storageClass: "use-default"
  cronTime: "1 1 * * *"
  storageSize: "100Gi"
logging:
  enabled: "true"
  es:
    enabled: "true"
    image: "docker.io/cnvrg/cnvrg-es:v7.8.1"
    maxMapImage: "docker.io/cnvrg/cnvrg-tools:v0.3"
    port: "9200"
    svcName: "elasticsearch"
    runAsUser: "1000"
    runAsGroup: "1000"
    fsGroup: "1000"
    patchEsNodes: "true"
    nodePort: "32200"
    storageClass: "use-default"
    javaOpts: ""
    cpuLimit: "2"
    memoryLimit: "4Gi"
    cpuRequest: "1"
    memoryRequest: "1Gi"
    storageSize: "100Gi"
  elastalert:
    enabled: "true"
    image: "bitsensor/elastalert:3.0.0-beta.1"
    port: "80"
    nodePort: "32030"
    containerPort: "3030"
    svcName: "elastalert"
    storageClass: "use-default"
    runAsUser: "1000"
    runAsGroup: "1000"
    fsGroup: "1000"
    cpuRequest: "100m"
    memoryRequest: "200Mi"
    storageSize: "100Gi"
  fluentd:
    enabled: "true"
    image: "fluent/fluentd-kubernetes-daemonset:v1.11-debian-elasticsearch7-1"
    journalPath: "/var/log/journal"
    containersPath: "/var/lib/docker/containers"
    journald: "false"
    cpuRequest: "100m"
    memoryRequest: "200Mi"
    memoryLimit: "200Mi"
  kibana:
    enabled: "true"
    svcName: "kibana"
    image: "docker.elastic.co/kibana/kibana-oss:7.8.1"
    nodePort: "30601"
    cpuRequest: "500m"
    memoryRequest: "500Mi"
    cpuLimit: "1"
    memoryLimit: "2000Mi"
    port: "5601"
minio:
  enabled: "true"
  replicas: "1"
  image: "docker.io/minio/minio:RELEASE.2020-09-17T04-49-20Z"
  port: "9000"
  svcName: "minio"
  nodePort: "30090"
  storageClass: "use-default"
  sharedStorage:
    enabled: "false"
  cpuRequest: "1"
  memoryRequest: "2Gi"
  storageSize: "100Gi"
monitoring:
  enabled: "true"
  prometheusOperator:
    enabled: "true"
    images:
      operatorImage: "quay.io/coreos/prometheus-operator:v0.40.0"
      configReloaderImage: "jimmidyson/configmap-reload:v0.3.0"
      prometheusConfigReloaderImage: "quay.io/coreos/prometheus-config-reloader:v0.40.0"
      kubeRbacProxyImage: "quay.io/coreos/kube-rbac-proxy:v0.4.1"
  prometheus:
    enabled: "true"
    image: "quay.io/prometheus/prometheus:v2.22.2"
    cpuRequest: "1"
    memoryRequest: "1Gi"
    storageSize: "100Gi"
    svcName: "prometheus"
    port: "9090"
    nodePort: "30909"
    storageClass: "true"
  nodeExporter:
    enabled: "true"
    image: "quay.io/prometheus/node-exporter:v0.18.1"
    port: "9100"
  kubeStateMetrics:
    enabled: "true"
    image: "quay.io/coreos/kube-state-metrics:v1.9.5"
  grafana:
    enabled: "true"
    image: "grafana/grafana:7.2.0"
    svcName: "grafana"
    port: "3000"
    nodePort: "30012"
  defaultServiceMonitors:
    enabled: "true"
  sidekiqExporter:
    enabled: "true"
    image: "docker.io/strech/sidekiq-prometheus-exporter:0.1.13"
  minioExporter:
    enabled: "true"
    image: "docker.io/cnvrg/cnvrg-boot:v0.24"
  dcgmExporter:
    enabled: "true"
    image: "nvidia/dcgm-exporter:1.7.2"
    port: "9400"
  idleMetricsExporter:
    enabled: "true"
  metricsServer:
    enabled:  "true"
    image: "k8s.gcr.io/metrics-server/metrics-server:v0.3.7"
networking:
  enabled: "true"
  ingressType: "istio"
  istio:
    enabled: "true"
    operatorImage: "docker.io/istio/operator:1.8.1"
    hub: "docker.io/istio"
    tag: "1.8.1"
    proxyImage: "proxyv2"
    mixerImage: "mixer"
    pilotImage: "pilot"
    gwName: "cnvrg-gateway"
    externalIp: ""
    ingressSvcAnnotations: ""
    loadBalancerSourceRanges: ""
  ingress:
    enabled: "true"
    timeout: "18000s"
    retriesAttempts: "5"
    perTryTimeout: "3600s"
  https:
    enabled: "true"
    cert: ""
    key: ""
    certSecret: ""
nvidiadp:
  enabled: "true"
  image: "nvidia/k8s-device-plugin:v0.7.0"
  nodeSelector:
    enabled: "true"
    key: "accelerator"
    value: "nvidia"
mpi:
  enabled: "true"
  image: "mpioperator/mpi-operator:v0.2.3"
  kubectlDeliveryImage: "mpioperator/kubectl-delivery:v0.2.3"
  registry:
    name: "mpi-private-registry"
    url: "docker.io"
    user: ""
    password: ""
storage:
  enabled: "false"
  ccpStorageClass: ""
  hostpath:
    enabled: "false"
    image: "quay.io/kubevirt/hostpath-provisioner"
    hostPath: "/cnvrg-storage"
    storageClassName: "cnvrg-hostpath-storage"
    nodeName: ""
    cpuRequest: "100m"
    memoryRequest: "100Mi"
    cpuLimit: "200m"
    memoryLimit: "200Mi"
    reclaimPolicy: "Retain"
    defaultSc: "false"
  nfs:
    enabled: "false"
    image: "quay.io/external_storage/nfs-client-provisioner:latest"
    provisioner: "cnvrg.io/ifs"
    storageClassName: "cnvrg-nfs-storage"
    server: ""
    path: ""
    cpuRequest: "100m"
    memoryRequest: "100Mi"
    cpuLimit: "200m"
    memoryLimit: "200Mi"
    reclaimPolicy: "Delete"
    defaultSc: "false"
vpa:
  enabled: "false"
  images:
    admissionImage: "k8s.gcr.io/autoscaling/vpa-admission-controller:0.9.0"
    recommenderImage: "k8s.gcr.io/autoscaling/vpa-recommender:0.9.0"
    updaterImage: "k8s.gcr.io/autoscaling/vpa-updater:0.9.0"
"""

print(json.dumps(yaml.safe_load(y)))