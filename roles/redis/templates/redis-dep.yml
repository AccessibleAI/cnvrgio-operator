#jinja2: trim_blocks: "true", lstrip_blocks: "false"
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{redis.svcName|default('redis')}}"
  namespace: "{{ ansible_operator_meta.namespace }}"
  labels:
    app: "{{redis.svcName|default('redis')}}"
spec:
  selector:
    matchLabels:
      app: "{{redis.svcName|default('redis')}}"
  template:
    metadata:
      labels:
        app: "{{redis.svcName|default('redis')}}"
    spec:
      serviceAccountName: "{{cnvrgApp.conf.rbac.serviceAccountName}}"
      {% if tenancy.enabled == "true" %}
      nodeSelector:
        {{ tenancy.cnvrg.key }}: "{{ tenancy.cnvrg.value }}"
      {% endif %}
      {% if tenancy.enabled == "true" and tenancy.dedicatedNodes == "true" %}
      tolerations:
        - key: "{{ tenancy.cnvrg.key }}"
          operator: "Equal"
          value: "{{ tenancy.cnvrg.value }}"
          effect: "NoSchedule"
      {% endif %}
      containers:
        - image: "{{redis.image|default('redis:3.0.5')}}"
          name: redis
          command: [ "redis-server", "/config/redis.conf" ]
          ports:
            - containerPort: {{redis.port|default('6379')}}
          resources:
            limits:
              cpu: "{{redis.limits.cpu|default('1')}}"
              memory: "{{redis.limits.memory|default('2Gi')}}"
            requests:
              cpu: "{{redis.requests.cpu|default('500m')}}"
              memory: "{{redis.requests.memory|default('1Gi')}}"
          volumeMounts:
            - name: redis-data
              mountPath: /data
            - name: redis-config
              mountPath: /config
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: "{{redis.svcName}}"
        - name: redis-config
          configMap:
            name: redis-conf
