
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{logging.kibana.svcName}}"
  namespace: "{{ ansible_operator_meta.namespace }}"
  labels:
    app: "{{logging.kibana.svcName}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{logging.kibana.svcName}}"
  template:
    metadata:
      labels:
        app: "{{logging.kibana.svcName}}"
    spec:
      serviceAccountName: "{{cnvrgApp.conf.rbac.serviceAccountName}}"
      {% if tenancy.enabled == "true" %}
      nodeSelector:
        {{ tenancy.cnvrg.key }}: "{{ tenancy.cnvrg.value }}"
      {% endif %}
      {% if tenancy.enabled == "true" and tenancy.dedicatedNodes == "true" %}
      tolerations:
      - key: "{{ tenancy.cnvrg.key }}"
        operator: "Equal"
        value: "{{ tenancy.cnvrg.value }}"
        effect: "NoSchedule"
      {% endif %}
      containers:
        {% if oauthProxy.enabled == "true" %}
        - name: "cnvrg-oauth-proxy"
          image: "{{oauthProxy.image}}"
          command: [ "oauth2-proxy","--config", "/tmp/conf" ]
          volumeMounts:
            - name: "oauth-proxy-config-kibana"
              mountPath: "tmp/"
              readOnly: true
        {% endif %}
        - name: "{{logging.kibana.svcName}}"
          image: "{{logging.kibana.image}}"
          env:
          - name: ELASTICSEARCH_URL
            value: "{{ ('http://'+logging.es.svcName + '.' + ansible_operator_meta.namespace + '.svc.cluster.local'+':'+logging.es.port) }}"
          ports:
          - containerPort: {{logging.kibana.port}}
          resources:
            limits:
              cpu: "{{ logging.kibana.cpuLimit }}"
              memory: "{{ logging.kibana.memoryLimit }}"
            requests:
              cpu: "{{ logging.kibana.cpuRequest }}"
              memory: "{{ logging.kibana.memoryRequest }}"
      {% if oauthProxy.enabled == "true" %}
      volumes:
      - name: "oauth-proxy-config-kibana"
        configMap:
         name: "oauth-proxy-config-kibana"
      {% endif %}