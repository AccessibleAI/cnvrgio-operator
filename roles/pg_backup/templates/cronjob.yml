apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: "{{ pg_backup.name }}"
  namespace: "{{ansible_operator_meta.namespace}}"
  labels:
    app: "{{ pg_backup.name }}"
spec:
  schedule: "{{ pg_backup.cronTime }}"
  jobTemplate:
    spec:
      template:
        spec:
          securityContext:
            runAsUser: {{ pg.runAsUser }}
            fsGroup: {{ pg.fsGroup }}
{% if storage.hostpath.enabled == "true" and tenancy.enabled == "false" %}
          nodeSelector:
            kubernetes.io/hostname: "{{ storage.hostpath.nodeName }}"
{% elif storage.hostpath.enabled == "false" and tenancy.enabled == "true" %}
          nodeSelector:
            {{ tenancy.cnvrg.key }}: "{{ tenancy.cnvrg.value }}"
{% elif storage.hostpath.enabled == "true" and tenancy.enabled == "true" %}
          nodeSelector:
            kubernetes.io/hostname: "{{ storage.hostpath.nodeName }}"
            {{ tenancy.cnvrg.key }}: "{{ tenancy.cnvrg.value }}"
{% endif %}
{%  if tenancy.enabled == "true" and tenancy.dedicatedNodes == "true" %}
          tolerations:
          - key: "{{ tenancy.cnvrg.key }}"
            operator: "Equal"
            value: "{{ tenancy.cnvrg.value }}"
            effect: "NoSchedule"
{% endif %}
          serviceAccountName: "{{rbac.serviceAccountName}}"
          containers:
            - name: "{{ pg_backup.name }}"
              image: "{{ pg.image }}"
              workingDir: "{{ pg_backup.path }}"
              command: ["/bin/bash", "-c", "{{ pg_backup.script_path }}/backup.sh"]
              volumeMounts:
              - name: "{{ pg_backup.name }}"
                mountPath: "{{ pg_backup.path }}"
              - name: pg-backup-cm
                mountPath: "{{ pg_backup.script_path }}"
              envFrom:
                - secretRef:
                    name: env-secrets
          restartPolicy: OnFailure
          volumes:
            - name: pg-backup-cm
              configMap:
                name: "{{ pg_backup.name }}"
                defaultMode: 0755
            - name: "{{ pg_backup.name }}"
              persistentVolumeClaim:
                claimName: "{{ pg_backup.name }}"