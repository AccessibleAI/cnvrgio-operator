#jinja2: trim_blocks: "true", lstrip_blocks: "false"
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: "{{ansible_operator_meta.namespace}}"
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/metrics
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: "{{ansible_operator_meta.namespace}}"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    prometheus: cnvrg
  name: "{{moniotring.prometheus.svc_name}}"
  namespace: "{{ansible_operator_meta.namespace}}"
spec:
{% if ingress_type == "nodeport" %}
  type: NodePort
{% endif %}
  ports:
  - name: web
    port: {{moniotring.prometheus.port}}
    targetPort: web
{% if ingress_type == "nodeport" %}
    nodePort: {{ moniotring.prometheus.node_port }}
{% endif %}
  selector:
    app: prometheus
    prometheus: cnvrg

---
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  labels:
    app: prometheus
    prometheus: cnvrg
  name: cnvrg
  namespace: "{{ansible_operator_meta.namespace}}"
spec:
  storage:
    disableMountSubPath: true
    volumeClaimTemplate:
      spec:
        resources:
          requests:
            storage: "{{ moniotring.prometheus.storage_size }}"
        {% if hostpath.enabled == "true" %}
        storageClassName: {{ hostpath.storage_class_name }}
        {% elif nfs.enabled == "true" %}
        storageClassName: "{{ nfs.storage_class_name }}"
        {% elif pg.storage_class != "use-default" %}
        storageClassName: "{{ moniotring.prometheus.storage_class }}"
        {% endif %}
  image: "{{ moniotring.prometheus.prometheus_image }}"
  {% if tenancy.enabled == "true" and tenancy.dedicated_nodes == "true" %}
  tolerations:
    - key: "{{ tenancy.cnvrg.key }}"
      operator: "Equal"
      value: "{{ tenancy.cnvrg.value }}"
      effect: "NoSchedule"
  {% endif %}
  {% if hostpath.enabled == "true" and tenancy.enabled == "false" %}
  nodeSelector:
    kubernetes.io/hostname: "{{ hostpath.node_name }}"
  {% elif hostpath.enabled == "false" and tenancy.enabled == "true" %}
  nodeSelector:
    {{ tenancy.cnvrg.key }}: "{{ tenancy.cnvrg.value }}"
  {% elif hostpath.enabled == "true" and tenancy.enabled == "true" %}
  nodeSelector:
    kubernetes.io/hostname: "{{ hostpath.node_name }}"
    {{ tenancy.cnvrg.key }}: "{{ tenancy.cnvrg.value }}"
  {% endif %}
  podMonitorNamespaceSelector: {}
  podMonitorSelector: {}
  replicas: 1
  resources:
    requests:
      cpu: {{monitoring.prometheus.cpu_request}}
      memory: {{monitoring.prometheus.memory_request}}
  ruleSelector:
    matchLabels:
      prometheus: k8s
      role: alert-rules
  securityContext:
    fsGroup: 2000
    runAsNonRoot: true
    runAsUser: 1000
  serviceAccountName: prometheus-operator
  serviceMonitorNamespaceSelector: {}
  serviceMonitorSelector: {}
  version: v2.22.2
