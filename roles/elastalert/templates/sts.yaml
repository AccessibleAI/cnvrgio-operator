apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: "{{elastalert.svc_name}}"
  name: "{{elastalert.svc_name}}"
  namespace: "{{ ansible_operator_meta.namespace }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{elastalert.svc_name}}"
  serviceName: "{{elastalert.svc_name}}"
  template:
    metadata:
      labels:
        app: "{{elastalert.svc_name}}"
    spec:
      initContainers:
      - name: chown-folder
        image: cnvrg/custom:ubuntu_curl_v1
        command: ['/bin/bash', '-c', "chown -R 1000:1000 /opt/elastalert/rules;"]
        volumeMounts:
        - mountPath: /opt/elastalert/rules
          name: elastalert-storage
      {% if tenancy.enabled == "true" and tenancy.dedicated_nodes == "true" %}
      tolerations:
      - key: "{{ tenancy.cnvrg.key }}"
        operator: "Equal"
        value: "{{ tenancy.cnvrg.value }}"
        effect: "NoSchedule"
      {% endif %}
      {% if hostpath.enabled == "true" and tenancy.enabled == "false" %}
      nodeSelector:
        kubernetes.io/hostname: "{{ hostpath.node_name }}"
      {% elif hostpath.enabled == "false" and tenancy.enabled == "true" %}
      nodeSelector:
        {{ tenancy.cnvrg.key }}: "{{ tenancy.cnvrg.value }}"
      {% elif hostpath.enabled == "true" and tenancy.enabled == "true" %}
      nodeSelector:
        kubernetes.io/hostname: "{{ hostpath.node_name }}"
        {{ tenancy.cnvrg.key }}: "{{ tenancy.cnvrg.value }}"
      {% endif %}

      containers:
      - image: "{{ elastalert.image }}"
        imagePullPolicy: IfNotPresent
        name: "{{elastalert.svc_name}}"
        ports:
        - containerPort: {{elastalert.container_port}}
          protocol: TCP
        resources:
          requests:
            cpu: "{{elastalert.cpu_request}}"
            memory: "{{elastalert.memory_request}}"
          limits:
            cpu: "{{ elastalert.cpu_limit }}"
            memory: "{{ elastalert.memory_limit }}"
        volumeMounts:
        - mountPath: /opt/elastalert-server/config/config.json
          subPath: config.json
          name: elastalert-config
        - mountPath: /opt/elastalert/config.yaml
          subPath: config.yaml
          name: elastalert-config
        - mountPath: /opt/elastalert/rules
          name: elastalert-storage
      restartPolicy: Always
      serviceAccount: "{{rbac.service_account_name}}"
      serviceAccountName: "{{rbac.service_account_name}}"
      volumes:
      - configMap:
          name: elastalert-config
        name: elastalert-config
  volumeClaimTemplates:
  - metadata:
      name: elastalert-storage
    spec:
      accessModes: [ ReadWriteOnce ]
      resources:
        requests:
          storage: "{{elastalert.storage_size}}"
      {% if hostpath.enabled == "true" %}
      storageClassName: "{{ hostpath.storage_class_name }}"
      {% elif nfs.enabled == "true" %}
      storageClassName: "{{ nfs.storage_class_name }}"
      {% elif pg.storage_class != "use-default" %}
      storageClassName: "{{ elastalert.storage_class }}"
      {% endif %}