#jinja2: trim_blocks: "true", lstrip_blocks: "false"
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: "{{elastalert.svc_name}}"
  name: "{{elastalert.svc_name}}"
  namespace: "{{ ansible_operator_meta.namespace }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{elastalert.svc_name}}"
  template:
    metadata:
      labels:
        app: "{{elastalert.svc_name}}"
    spec:
      {% if security_mode == "default" %}
      securityContext:
        runAsUser: {{ elastalert.run_as_user }}
        runAsGroup: {{ elastalert.run_as_group }}
        fsGroup: {{ elastalert.fs_group }}
      {% endif %}
      containers:
      - image: "{{ elastalert.image }}"
        name: "{{elastalert.svc_name}}"
        ports:
        - containerPort: {{elastalert.container_port}}
          protocol: TCP
        resources:
          requests:
            cpu: "{{elastalert.cpu_request}}"
            memory: "{{elastalert.memory_request}}"
          limits:
            cpu: "{{ elastalert.cpu_limit }}"
            memory: "{{ elastalert.memory_limit }}"
        volumeMounts:
        - mountPath: /opt/elastalert-server/config/config.json
          subPath: config.json
          name: elastalert-config
        - mountPath: /opt/elastalert/config.yaml
          subPath: config.yaml
          name: elastalert-config
        - mountPath: /opt/elastalert/rules
          name: "{{elastalert.svc_name}}"
      restartPolicy: Always
      serviceAccount: "{{rbac.service_account_name}}"
      serviceAccountName: "{{rbac.service_account_name}}"
      volumes:
      - name: "{{elastalert.svc_name}}"
        persistentVolumeClaim:
          claimName: "{{elastalert.svc_name}}"
      - configMap:
          name: elastalert-config
        name: elastalert-config