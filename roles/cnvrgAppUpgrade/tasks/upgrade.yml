- name: status
  import_tasks: status.yml
  vars:
    message: "scaling sedekiqs to 0"

- name: scale to 0 sedekiqs and disable resources requests
  set_fact:
    cnvrgAppObject: "{{ cnvrgAppObject|combine(
                        {
                        'spec': {
                            'otags':'cnvrgApp',
                            'cnvrgApp': {
                                  'resourcesRequestEnabled':'false',
                                  'sidekiq':   {'replicas':'0'},
                                  'searchkiq': {'replicas':'0'},
                                  'systemkiq': {'replicas':'0'},
                                }
                            }
                        }, recursive=True) }}"

- name: update CnvrgApp
  k8s:
    state: "present"
    definition: "{{ cnvrgAppObject }}"
    wait: yes

- name: wait for sidekiq scale to 0
  shell: |
    kubectl get pods -l "app={{item}}" -n"{{ ansible_operator_meta.namespace }}" --no-headers | wc -l
  loop:
    - sidekiq
    - searchkiq
    - systemkiq
  register: replicas
  until: replicas.stdout|int == 0
  retries: 3600
  delay: 2

- name: status
  import_tasks: status.yml
  vars:
    message: "upgrading app image"

- name: upgrading app image
  set_fact:
    cnvrgAppObject: "{{ cnvrgAppObject|combine({'spec': {'cnvrgApp': {'image':  image }}}, recursive=True) }}"

- name: update CnvrgApp
  k8s:
    state: "present"
    definition: "{{ cnvrgAppObject }}"
    wait: yes

- name: wait for app deployment got updated with new image
  shell: |
    kubectl get deploy app -ojson -n"{{ ansible_operator_meta.namespace }}" | jq -r '.spec.template.spec.containers[] | select(.name=="cnvrg-app") | .image'
  register: deploymentImage
  until: deploymentImage.stdout == image
  retries: 3600
  delay: 5

- name: status
  import_tasks: status.yml
  vars:
    message: "rolling out new image"

- name: waiting for app rollout to be done
  shell: |
    kubectl rollout status deploy/{{cnvrgApp.svcName}} -n{{ansible_operator_meta.namespace}} --timeout=1h

- name: status
  import_tasks: status.yml
  vars:
    message: "restoring cnvrg spec"

- name: get CnvrgAppUpgrade
  community.kubernetes.k8s_info:
    api_version: v1
    kind: CnvrgAppUpgrade
    namespace: "{{ ansible_operator_meta.namespace }}"
    name: "{{ ansible_operator_meta.name }}"
  register: cnvrgAppUpgradeSpec

- name: get CnvrgApp
  community.kubernetes.k8s_info:
    api_version: v1
    kind: CnvrgApp
    namespace: "{{ ansible_operator_meta.namespace }}"
    name: "{{ cnvrgAppName }}"
  register: cnvrgAppRes

- fail:
    msg: "cnvrgAppUpgradeSpec not found"
  when: (cnvrgAppUpgradeSpec.resources|length < 1) or (cnvrgAppRes.resources|length < 1)

- name: set values for restore
  block:
    - set_fact:
        backupSpec: "{{ cnvrgAppUpgradeSpec.resources[0].status.cnvrgBackup.cnvrgAppSpec|from_yaml}}"

    - set_fact:
        cnvrgSpec: "{{ cnvrgAppRes.resources[0] }}"

    - set_fact:
        resourcesRequestEnabled: "{% if backupSpec.cnvrgApp.resourcesRequestEnabled is defined %}{{backupSpec.cnvrgApp.resourcesRequestEnabled}}{% else %}{{cnvrgApp.resourcesRequestEnabled}}{% endif %}"

    - set_fact:
        sidekiqReplicas: "{% if backupSpec.cnvrgApp.sidekiq.replicas is defined %}{{backupSpec.cnvrgApp.sidekiq.replicas}}{% else %}{{cnvrgApp.sidekiq.replicas}}{% endif %}"

    - set_fact:
        searchkiqReplicas: "{% if backupSpec.cnvrgApp.searchkiq.replicas is defined %}{{backupSpec.cnvrgApp.searchkiq.replicas}}{% else %}{{cnvrgApp.searchkiq.replicas}}{% endif %}"

    - set_fact:
        systemkiqReplicas: "{% if backupSpec.cnvrgApp.systemkiq.replicas is defined %}{{backupSpec.cnvrgApp.systemkiq.replicas}}{% else %}{{cnvrgApp.systemkiq.replicas}}{% endif %}"

    - set_fact:
        otags: "{% if backupSpec.otags is defined %}{{backupSpec.otags}}{% else %}all{% endif %}"

- name: restore resourcesRequestEnabled from backup
  set_fact:
    cnvrgSpec: "{{ cnvrgSpec|combine(
                        {'spec': {
                            'otags': otags,
                            'cnvrgApp': {
                                  'resourcesRequestEnabled': resourcesRequestEnabled,
                                  'sidekiq':   {'replicas': sidekiqReplicas },
                                  'searchkiq': {'replicas': searchkiqReplicas},
                                  'systemkiq': {'replicas': systemkiqReplicas}
                                }
                            }
                        }, recursive=True) }}"

- name: update CnvrgApp
  k8s:
    state: "present"
    definition: "{{ cnvrgSpec }}"
    wait: yes

- name: wait for operator to start reconciliation
  pause:
    seconds: 10

- name: wait for awaiting next reconciliation on cnvrgapp
  shell: |
    kubectl get cnvrgapps.mlops.cnvrg.io cnvrg-app -n{{ ansible_operator_meta.namespace }} -o=custom-columns=STATUS:.status.conditions[0].message --no-headers
  register: status
  until: status.stdout == "Awaiting next reconciliation"
  retries: 3600
  delay: 5

- name: inactivate
  import_tasks: inactivate.yml

- name: status
  import_tasks: status.yml
  vars:
    message: "upgrade done"
