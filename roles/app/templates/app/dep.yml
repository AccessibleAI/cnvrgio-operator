apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{cnvrg_app.svc_name}}
  namespace: {{ ansible_operator_meta.namespace }}
  labels:
    app: {{cnvrg_app.svc_name}}
spec:
  replicas: {{ cnvrg_app.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 1
  selector:
    matchLabels:
      app: {{cnvrg_app.svc_name}}
  template:
    metadata:
      labels:
        app: {{cnvrg_app.svc_name}}
    spec:
{%  if tenancy.enabled == "true" %}
      nodeSelector:
        {{ tenancy.cnvrg.key }}: "{{ tenancy.cnvrg.value }}"
{%  endif %}
{%  if tenancy.enabled == "true" and tenancy.dedicated_nodes == "true" %}
      tolerations:
      - key: "{{ tenancy.cnvrg.key }}"
        operator: "Equal"
        value: "{{ tenancy.cnvrg.value }}"
        effect: "NoSchedule"
{% endif %}
{% if cnvrg_app.edition == "enterprise" %}
      imagePullSecrets:
        - name: {{ registry.name }}
{% endif %}
      serviceAccountName: "{{rbac.service_account_name}}"
      containers:
        - image: "{{cnvrg_app.image}}"
          command:
          - "/bin/bash"
          - "-lc"
          args:
          - >
            sed -i \
              "s/passenger_max_request_queue_size 10000;/passenger_max_request_queue_size 10000;\n    passenger_max_pool_size $CNVRG_PASSENGER_MAX_POOL_SIZE;\n/g" \
              /etc/nginx/nginx.conf
            touch /etc/service/sidekiq/down && /sbin/my_init
          env:
          - name: "CNVRG_RUN_MODE"
            value: "webapp"
          - name: "CNVRG_PASSENGER_MAX_POOL_SIZE"
            value: "{{ cnvrg_app.passenger_max_pool_size | default('20') }}"
          envFrom:
            - configMapRef:
                name: env-config
            - secretRef:
                name: env-secrets
          name: cnvrg-app
          ports:
            - containerPort: {{cnvrg_app.port}}
{% if (cnvrg_app.enable_readiness_probe | default ('true')) == "true" %}
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: "/users/sign_in"
              port: {{cnvrg_app.port}}
              scheme: HTTP
            initialDelaySeconds: 5
            successThreshold: 1
            periodSeconds: {{ cnvrg_app.readiness_period_seconds | default('100') }}
            timeoutSeconds: {{ cnvrg_app.readiness_timeout_seconds |default('60') }}
{%  endif %}
          resources:
            requests:
              cpu: "{{cnvrg_app.cpu}}"
              memory: "{{cnvrg_app.memory}}"
{% if app_secrets.cnvrg_storage_type == "gcp" %}
          volumeMounts:
          - name: "{{ conf.gcp_storage_secret }}"
            mountPath: "{{ conf.gcp_keyfile_mount_path }}"
            readOnly: true
{%  endif %}
{% if app_secrets.cnvrg_storage_type == "gcp" %}
      volumes:
      - name: "{{ conf.gcp_storage_secret }}"
        secret:
          secretName: "{{ conf.gcp_storage_secret }}"
{% endif %}
      initContainers:
      - name: services-check
        image: "{{seeder.image}}"
        command: ["/bin/bash", "-c", "python3 cnvrg-boot.py services-check"]
        imagePullPolicy: Always
        env:
        - name: "CNVRG_SERVICE_LIST"
{% if minio.enabled == "true" and  app_secrets.cnvrg_storage_type == "minio" %}
          value: "{{pg.svc_name}}:{{pg.port}};{{app_secrets.cnvrg_storage_endpoint}}/minio/health/ready"
{% else %}
          value: "{{pg.svc_name}}:{{pg.port}}"
{% endif %}
{% if cnvrg_app.fixpg == "true" %}
      - name: fixpg
        image: "{{seeder.image}}"
        command: ["/bin/bash", "-c", "python3 cnvrg-boot.py fixpg"]
        env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              name: env-secrets
              key: POSTGRES_USER
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: env-secrets
              key: POSTGRES_PASSWORD
        - name: CNVRG_PG_HOST
          valueFrom:
            secretKeyRef:
              name: env-secrets
              key: POSTGRES_HOST
        imagePullPolicy: Always
{% endif %}
      - name: seeder
        image: "{{seeder.image}}"
        command: ["/bin/bash", "-c", "python3 cnvrg-boot.py seeder --mode master"]
        imagePullPolicy: Always
        env:
        - name: "CNVRG_SEEDER_IMAGE"
          value: "{{cnvrg_app.image}}"
        - name: "CNVRG_SEED_CMD"
          value: "{{ seeder.seed_cmd }}"
        - name: "CNVRG_NS"
          value: "{{ ansible_operator_meta.namespace }}"
        - name: "CNVRG_SA_NAME"
          value: "{{rbac.service_account_name}}"
{% if cnvrg_app.edition == "enterprise" %}
        - name: "CNVRG_IMAGE_PULL_SECRET"
          value: {{ registry.name }}
{% endif %}
{% if app_secrets.cnvrg_storage_type == "gcp" %}
        - name: "CNVRG_GCP_KEYFILE_SECRET"
          value: "{{ conf.gcp_storage_secret }}"
        - name: "CNVRG_GCP_KEYFILE_MOUNT_PATH"
          value: "{{ conf.gcp_keyfile_mount_path }}"
{% endif %}


