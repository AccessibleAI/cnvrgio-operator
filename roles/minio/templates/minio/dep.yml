#jinja2: trim_blocks: "true", lstrip_blocks: "false"
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{minio.svcName}}"
  namespace: "{{ ansible_operator_meta.namespace }}"
  labels:
    app: "{{minio.svcName}}"
spec:
  selector:
    matchLabels:
      app: "{{minio.svcName}}"
  replicas: {{ minio.replicas |int }}
  template:
    metadata:
      labels:
        app: "{{minio.svcName}}"
    spec:
      {% if tenancy.enabled == "true" and tenancy.dedicatedNodes == "true" %}
      tolerations:
      - key: "{{ tenancy.cnvrg.key }}"
        operator: "Equal"
        value: "{{ tenancy.cnvrg.value }}"
        effect: "NoSchedule"
       {% endif %}
      {% if securityMode == "default" %}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      {% endif %}
      {% if storage.hostpath.enabled == "true" and tenancy.enabled == "false" %}
      nodeSelector:
        kubernetes.io/hostname: "{{ storage.hostpath.nodeName }}"
      {% elif storage.hostpath.enabled == "false" and tenancy.enabled == "true" %}
      nodeSelector:
        {{ tenancy.cnvrg.key }}: "{{ tenancy.cnvrg.value }}"
      {% elif storage.hostpath.enabled == "true" and tenancy.enabled == "true" %}
      nodeSelector:
        kubernetes.io/hostname: "{{ storage.hostpath.nodeName }}"
        {{ tenancy.cnvrg.key }}: "{{ tenancy.cnvrg.value }}"
      {% endif %}
      containers:
        - name: minio
          image: "{{minio.image}}"
          args:
            - gateway
            - nas
            - /data
          env:
            - name: MINIO_SSE_MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: env-secrets
                  key: MINIO_SSE_MASTER_KEY
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: env-secrets
                  key: CNVRG_STORAGE_ACCESS_KEY
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: env-secrets
                  key: CNVRG_STORAGE_SECRET_KEY
          ports:
            - containerPort: {{minio.port}}
          volumeMounts:
            - name: minio-storage
              mountPath: /data
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: {{minio.port}}
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: {{minio.port}}
            initialDelaySeconds: 60
            periodSeconds: 20
          resources:
            requests:
              cpu: "{{ minio.cpuRequest | default('2') }}"
              memory: "{{ minio.memoryRequest }}"
      volumes:
        - name: minio-storage
          persistentVolumeClaim:
            claimName: "{{minio.svcName}}"
