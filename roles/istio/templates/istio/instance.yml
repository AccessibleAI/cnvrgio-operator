#jinja2: trim_blocks: "true", lstrip_blocks: "false"
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  name: cnvrg-istio
  namespace: "{{ansible_operator_meta.namespace}}"
spec:
  profile: minimal
  namespace: "{{ansible_operator_meta.namespace}}"
  hub: "{{ istio.hub }}"
  tag: "{{ istio.tag }}"
  values:
    global:
      istioNamespace: "{{ansible_operator_meta.namespace}}"
    meshConfig:
      rootNamespace: "{{ansible_operator_meta.namespace}}"
  components:
    base:
      enabled: true
    pilot:
      enabled: true
      k8s:
        {% if tenancy.enabled == "true" %}
        nodeSelector:
          "{{ tenancy.cnvrg.key }}": "{{ tenancy.cnvrg.value }}"
        {% endif %}
        {% if tenancy.enabled == "true" and tenancy.dedicatedNodes == "true" %}
        tolerations:
        - key: "{{ tenancy.cnvrg.key }}"
          operator: "Equal"
          value: "{{ tenancy.cnvrg.value }}"
          effect: "NoSchedule"
        {% endif %}
    ingressGateways:
    - enabled: true
      k8s:
        {% if tenancy.enabled == "true" %}
        nodeSelector:
          "{{ tenancy.cnvrg.key }}": "{{ tenancy.cnvrg.value }}"
        {% endif %}
        {% if tenancy.enabled == "true" and tenancy.dedicatedNodes == "true" %}
        tolerations:
        - key: "{{ tenancy.cnvrg.key }}"
          operator: "Equal"
          value: "{{ tenancy.cnvrg.value }}"
          effect: "NoSchedule"
        {% endif %}
        {% if istio.ingressSvcAnnotations != "" %}
        serviceAnnotations:
          {% set annotations = istio.ingressSvcAnnotations.split(";") %}
            {% for annotation in annotations %}
              {% set annotation_itmes = annotation.split(":") %}
                {% if annotation_itmes|length == 2 %}
          "{{annotation_itmes[0].strip()}}": "{{annotation_itmes[1].strip()}}"
              {% endif %}
          {% endfor %}
        {% endif %}
        env:
        - name: ISTIO_META_ROUTER_MODE
          value: sni-dnat
        hpaSpec:
          maxReplicas: 5
          metrics:
          - resource:
              name: cpu
              targetAverageUtilization: 80
            type: Resource
          minReplicas: 1
          scaleTargetRef:
            apiVersion: apps/v1
            kind: Deployment
            name: istio-ingressgateway
        resources:
          limits:
            cpu: 2000m
            memory: 1024Mi
          requests:
            cpu: 100m
            memory: 128Mi
        service:
          {% if istio.externalIp != "" %}
          type: ClusterIP
          externalIPs:
          {% set externalIps = istio.externalIp.split(';') %}
            {% for externalIp in externalIps %}
            - "{{ externalIp }}"
            {% endfor %}
          {% endif %}
          ports:
          - name: status-port
            port: 15021
            targetPort: 15021
          - name: http2
            port: 80
            targetPort: 8080
          - name: https
            port: 443
            targetPort: 8443
          - name: tls
            port: 15443
            targetPort: 15443
        strategy:
          rollingUpdate:
            maxSurge: 100%
            maxUnavailable: 25%
      name: istio-ingressgateway
