- name: run rollback
  block:
  - include_role:
      name: common
      tasks_from: cr_status
    vars:
      message: "running rollback"

  - set_fact:
      backupSpec: "{{ _mlops_cnvrg_io_cnvrgappupgrade.status.cnvrgBackup.cnvrgAppSpec|from_yaml}}"

  - set_fact:
      backupSpec: "{{ backupSpec|combine({'tags': 'all'}, recursive=True) }}"
    when: tags not in backupSpec.keys()

  - name: restoring cnvrgapp from backup
    set_fact:
      cnvrgAppObject: {"apiVersion":"mlops.cnvrg.io/v1","kind":"CnvrgApp","metadata":{"name": "{{ cnvrgAppUpgrade.cnvrgAppName  }}", "namespace": "{{ ansible_operator_meta.namespace }}" }, "spec": "{{ backupSpec }}"}

  - name: update CnvrgApp
    k8s:
      state: "present"
      definition: "{{ cnvrgAppObject }}"
      wait: yes

  - include_role:
      name: common
      tasks_from: cr_status
    vars:
      message: "rollback done"
  when:
  - cnvrgAppUpgrade.rollback == "true"
  - _mlops_cnvrg_io_cnvrgappupgrade.status.cnvrgBackup is defined

- name: run upgrade
  block:
  - include_role:
      name: common
      tasks_from: cr_status
    vars:
      message: "getting cnvrgapp"

  - name: Get CnvrgApp
    community.kubernetes.k8s_info:
      api_version: v1
      kind: CnvrgApp
      namespace: "{{ ansible_operator_meta.namespace }}"
      name: "{{ cnvrgAppUpgrade.cnvrgAppName }}"
    register: resourcesCnvrg

  - name: set cnvrgAppObject
    set_fact:
      cnvrgAppObject: {"apiVersion":"mlops.cnvrg.io/v1","kind":"CnvrgApp","metadata":{"name": "{{ cnvrgAppUpgrade.cnvrgAppName  }}", "namespace": "{{ ansible_operator_meta.namespace }}" }, "spec": "{{ resourcesCnvrg.resources[0].spec }}"}
    when: resourcesCnvrg.resources|length > 0

  - name: fail if spec not found
    block:
    - include_role:
        name: common
        tasks_from: cr_status
      vars:
        message: "error,cnvrgapp not found can't upgrade"
    - fail:
        msg: "cnvrgapp not found can't upgrade"
    when: cnvrgAppObject is undefined

  #################### Run upgrade ####################

  - name: run upgrade
    block:
    - name: bind cnvrg spec vars to global scope
      include_role:
        name: common
        tasks_from: bind_vars
      vars:
        key: "{{ item.key }}"
        value: "{{ item.value }}"
      with_dict: "{{ cnvrgAppObject.spec }}"

    - include_role:
        name: common
        tasks_from: cr_status
      vars:
        message: "backup cnvrgapp"

    - name: Backup CnvrgApp
      operator_sdk.util.k8s_status:
        api_version: mlops.cnvrg.io/v1
        kind: CnvrgAppUpgrade
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        status:
          cnvrgBackup:
            cnvrgAppSpec: "{{ cnvrgAppObject.spec }}"
      when:
      - _mlops_cnvrg_io_cnvrgappupgrade.status.cnvrgBackup is undefined
      - dryRun == "false"



    - name: image caching ds
      block:
        - include_role:
            name: common
            tasks_from: cr_status
          vars:
            message: "caching app image"

        - name: Create app image caching ds
          include_role:
            name: common
            tasks_from: install
          vars:
            templatePath: "templates/upgrade/cache-image-ds.yml"
            state: "present"
            waitToComplete: yes

        - name: wait for image cache ds to come up
          shell: |
            kubectl get daemonset "{{ cnvrgAppUpgrade.cacheDsName }}" -n"{{ ansible_operator_meta.namespace }}" -ojson | jq -r .status
          register: dsStatus
          until: (dsStatus.stdout|from_json).desiredNumberScheduled == (dsStatus.stdout|from_json).currentNumberScheduled
          retries: 3600
          delay: 5

        - name: remove app image caching ds
          include_role:
            name: common
            tasks_from: install
          vars:
            templatePath: "templates/upgrade/cache-image-ds.yml"
            state: "absent"
            waitToComplete: yes
      when: cnvrgAppUpgrade.cacheImage == "true"

    - include_role:
        name: common
        tasks_from: cr_status
      vars:
        message: "scaling sedekiqs to 0"

    - name: scale to 0 sedekiqs and disable resources requests
      set_fact:
        cnvrgAppObject: "{{ cnvrgAppObject|combine({'spec': {'tags':'cnvrgApp','cnvrgApp': {'sidekiqReplicas': '0','sidekiqSearchkickReplicas':'0','resourcesRequestEnabled':'false'}}}, recursive=True) }}"

    - name: update CnvrgApp
      k8s:
        state: "present"
        definition: "{{ cnvrgAppObject }}"
        wait: "yes"

    - name: wait for sidekiq scale to 0
      shell: |
        kubectl get pods -l "app={{item}}" -n"{{ ansible_operator_meta.namespace }}" --no-headers | wc -l
      loop:
        - sidekiq
        - sidekiq-searchkick
      register: replicas
      until: replicas.stdout|int == 0
      retries: 3600
      delay: 2

    - include_role:
        name: common
        tasks_from: cr_status
      vars:
        message: "upgrading app image"

    - name: upgrading app image
      set_fact:
        cnvrgAppObject: "{{ cnvrgAppObject|combine({'spec': {'cnvrgApp': {'image':  cnvrgAppUpgrade.image }}}, recursive=True) }}"

    - name: update CnvrgApp
      k8s:
        state: "present"
        definition: "{{ cnvrgAppObject }}"
        wait: "yes"

    - name: wait for app deployment got updated with new image
      shell: |
        kubectl get deploy app -ojson -n"{{ ansible_operator_meta.namespace }}" | jq -r '.spec.template.spec.containers[] | select(.name=="cnvrg-app") | .image'
      register: image
      until: image.stdout == cnvrgAppUpgrade.image
      retries: 3600
      delay: 5

    - include_role:
        name: common
        tasks_from: cr_status
      vars:
        message: "app deploy updated with new image"

    - name: waiting for app rollout to be done
      shell: |
        kubectl rollout status deploy/{{cnvrgApp.svcName}} -n{{ansible_operator_meta.namespace}} --timeout=1h

    - include_role:
        name: common
        tasks_from: cr_status
      vars:
        message: "rollout is done"

    - name: get status of CnvrgAppUpgrade
      community.kubernetes.k8s_info:
        api_version: v1
        kind: CnvrgAppUpgrade
        namespace: "{{ ansible_operator_meta.namespace }}"
        name: "{{ ansible_operator_meta.name }}"
      register: cnvrgAppUpgradeSpec

    - fail:
        msg: "cnvrgAppUpgradeSpec not found"
      when: cnvrgAppUpgradeSpec.resources|length < 1

    - set_fact:
        cnvrgAppUpgradeSpec: "{{ cnvrgAppUpgradeSpec.resources[0]}}"

    - set_fact:
        backupSpec: "{{ cnvrgAppUpgradeSpec.status.cnvrgBackup.cnvrgAppSpec|from_yaml}}"

    - name: restore sidekiqs and resources requests
      set_fact:
        cnvrgAppObject: "{{ cnvrgAppObject|combine({'spec': {'tags':'cnvrgApp','cnvrgApp': {'sidekiqReplicas': backupSpec.cnvrgApp.sidekiqReplicas, 'sidekiqSearchkickReplicas': backupSpec.cnvrgApp.sidekiqSearchkickReplicas, 'resourcesRequestEnabled':backupSpec.cnvrgApp.resourcesRequestEnabled}}}, recursive=True) }}"

    - name: update CnvrgApp
      k8s:
        state: "present"
        definition: "{{ cnvrgAppObject }}"
        wait: "yes"

    - include_role:
        name: common
        tasks_from: cr_status
      vars:
        message: "restore sidekiqs replicase and resources requests"

    - name: wait for awaiting next reconciliation on cnvrgapp
      shell: |
        kubectl get cnvrgapps.mlops.cnvrg.io cnvrg-app -n{{ ansible_operator_meta.namespace }} -o=custom-columns=STATUS:.status.conditions[0].message --no-headers
      register: status
      until: status.stdout == "Awaiting next reconciliation"
      retries: 3600
      delay: 5

    - include_role:
        name: common
        tasks_from: cr_status
      vars:
        message: "restoring tags"

    - set_fact:
        restoreTags: "{% if 'tags' in backupSpec.keys() %}{{backupSpec.tags}}{% else %}all{% endif %}"

    - name: restore tags
      set_fact:
        cnvrgAppObject: "{{ cnvrgAppObject|combine({'spec': {'tags': restoreTags }}, recursive=True) }}"

    - name: update CnvrgApp
      k8s:
        state: "present"
        definition: "{{ cnvrgAppObject }}"
        wait: "yes"

    - name: set CnvrgAppUpgrade CR inactive
      set_fact:
        cnvrgAppUpgradeSpec: "{{ cnvrgAppUpgradeSpec|combine({'spec': {'cnvrgAppUpgrade': {'state':'inactive'}}}, recursive=True) }}"

    - name: update CnvrgAppUpgrade
      k8s:
        state: "present"
        wait: "yes"
        definition: "{{ {'apiVersion': 'mlops.cnvrg.io/v1',
                         'kind':'CnvrgAppUpgrade',
                         'metadata': {'name':ansible_operator_meta.name, 'namespace':ansible_operator_meta.namespace},
                         'spec': cnvrgAppUpgradeSpec.spec,
                         'status': cnvrgAppUpgradeSpec.status} }}"

    - include_role:
        name: common
        tasks_from: cr_status
      vars:
        message: "upgrade done"

    when:
      - cnvrgAppObject is defined

  when: cnvrgAppUpgrade.rollback == "false"

