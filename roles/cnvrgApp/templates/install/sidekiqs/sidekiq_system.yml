apiVersion: apps/v1
kind: Deployment
metadata:
  name: sidekiq-system
  namespace: "{{ ansible_operator_meta.namespace }}"
  labels:
    app: sidekiq-system
spec:
  replicas: {{ cnvrgApp.sidekiqSystemReplicas }}
  selector:
    matchLabels:
      app: sidekiq-system
  template:
    metadata:
      labels:
        app: sidekiq-system
    spec:
      {% if tenancy.enabled == "true" %}
      nodeSelector:
        {{ tenancy.cnvrg.key }}: "{{ tenancy.cnvrg.value }}"
      {% endif %}
      {% if tenancy.enabled == "true" and tenancy.dedicatedNodes == "true" %}
      tolerations:
      - key: "{{ tenancy.cnvrg.key }}"
        operator: "Equal"
        value: "{{ tenancy.cnvrg.value }}"
        effect: "NoSchedule"
      {% endif %}
      {% if cnvrgApp.edition == "enterprise" %}
      imagePullSecrets:
        - name: {{ cnvrgApp.conf.registry.name }}
      {% endif %}
      serviceAccountName: "{{cnvrgApp.conf.rbac.serviceAccountName}}"
      terminationGracePeriodSeconds: {{ cnvrgApp.sidekiqPrestopHook.killTimeout|int }}
      containers:
      - name: sidekiq
        image: "{{cnvrgApp.image}}"
        command:
        - "/bin/bash"
        - "-lc"
        args:
        - "touch /etc/service/nginx/down && /sbin/my_init"
        env:
        - name: "CNVRG_RUN_MODE"
          value: "sidekiq"
        - name: "SIDEKIQ_SYSTEM"
          value: "true"
        imagePullPolicy: Always
        {% if cnvrgApp.conf.cnvrgStorageType == "gcp" %}
        volumeMounts:
        - name: "{{ cnvrgApp.conf.gcpStorageSecret }}"
          mountPath: "{{ cnvrgApp.conf.gcpKeyfileMountPath }}"
          readOnly: true
        {% endif %}
        envFrom:
        - configMapRef:
            name: env-config
        - secretRef:
            name: env-secrets
        {% if cnvrgApp.resourcesRequestEnabled == "true" %}
        resources:
          requests:
            cpu: "{{ cnvrgApp.sidekiqSystemCpu }}"
            memory: "{{ cnvrgApp.sidekiqSystemMemory }}"
        {% endif %}
        {% if cnvrgApp.sidekiqPrestopHook.enabled == "true" %}
        lifecycle:
          preStop:
            exec:
              command: ["/bin/bash","-lc","sidekiqctl quiet sidekiq-0.pid && sidekiqctl stop sidekiq-0.pid {{ cnvrgApp.sidekiqPrestopHook.killTimeout }}"]
        {% endif %}
      {% if cnvrgApp.conf.cnvrgStorageType == "gcp" %}
      volumes:
      - name: "{{ cnvrgApp.conf.gcpStorageSecret }}"
        secret:
          secretName: "{{ cnvrgApp.conf.gcpStorageSecret }}"
      {% endif %}
      initContainers:
      - name: seeder
        image: "{{cnvrgApp.seeder.image}}"
        command: ["/bin/bash", "-c", "python3 cnvrg-boot.py seeder --mode worker"]
        env:
        - name: "CNVRG_NS"
          value: "{{ ansible_operator_meta.namespace }}"