kind: Deployment
apiVersion: apps/v1
metadata:
  name: nfs-client-provisioner
  namespace: "{{ ansible_operator_meta.namespace }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nfs-client-provisioner
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: nfs-client-provisioner
    spec:
{%  if tenancy.enabled == "true" %}
      nodeSelector:
        {{ tenancy.cnvrg.key }}: "{{ tenancy.cnvrg.value }}"
{%  endif %}
{%  if tenancy.enabled == "true" and tenancy.dedicatedNodes == "true" %}
      tolerations:
      - key: "{{ tenancy.cnvrg.key }}"
        operator: "Equal"
        value: "{{ tenancy.cnvrg.value }}"
        effect: "NoSchedule"
{% endif %}
      serviceAccountName: nfs-client-provisioner
      containers:
        - name: nfs-client-provisioner
          image: "{{ nfs.image }}"
          volumeMounts:
            - name: nfs-client-root
              mountPath: /persistentvolumes
          env:
            - name: PROVISIONER_NAME
              value: "{{ nfs.provisioner }}"
            - name: nfsServer
              value: "{{ nfs.server }}"
            - name: NFS_PATH
              value: "{{ nfs.path }}"
          resources:
            limits:
              cpu: "{{ nfs.cpuLimit }}"
              memory: "{{ nfs.memoryLimit }}"
            requests:
              cpu: "{{ nfs.cpuRequest }}"
              memory: "{{ nfs.memoryRequest }}"
      volumes:
        - name: nfs-client-root
          nfs:
            server: "{{ nfs.server }}"
            path: "{{ nfs.path }}"