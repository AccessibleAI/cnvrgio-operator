operatorImage: docker.io/cnvrg/cnvrg-operator
hookImage: "docker.io/cnvrg/cnvrg-tools:v0.3"
computeProfile: medium
computeProfiles:
  large:
    storage: 100Gi
    cnvrgApp:
      cpu: 4
      memory: 8Gi
      sidekiq:
        cpu: 4
        memory: 8Gi
        replicas: 2
      searchkiq:
        cpu: 1
        memory: 2Gi
        replicas: 1
      systemkiq:
        cpu: 500m
        memory: 500Mi
        replicas: 1
    pg:
      cpu: 4
      memory: 8Gi
    minio:
      cpu: 2
      memory: 4Gi
    es:
      cpu: 1
      memory: 1Gi
    elastalert:
      cpu: 1
      memory: 1Gi
    hyper:
      cpu: 1
      memory: 2Gi
    prometheus:
      cpu: 1
      memory: 1Gi
    redis:
      cpu: 500m
      memory: 1Gi
  medium:
    storage: 100Gi
    cnvrgApp:
      cpu: 2
      memory: 4Gi
      sidekiq:
        cpu: 1
        memory: 4Gi
        replicas: 2
      searchkiq:
        cpu: 1
        memory: 1Gi
        replicas: 1
      systemkiq:
        cpu: 500m
        memory: 500Mi
        replicas: 1
    pg:
      cpu: 2
      memory: 4Gi
    minio:
      cpu: 1
      memory: 2Gi
    es:
      cpu: 1
      memory: 1Gi
    hyper:
      cpu: 100m
      memory: 200Mi
    elastalert:
      cpu: 100m
      memory: 200Mi
    prometheus:
      cpu: 1
      memory: 1Gi
    redis:
      cpu: 500m
      memory: 1Gi
  small:
    storage: 3Gi
    cnvrgApp:
      cpu: 100m
      memory: 100Mi
      sidekiq:
        cpu: 100m
        memory: 100Mi
        replicas: 1
      searchkiq:
        cpu: 100m
        memory: 100Mi
        replicas: 1
      systemkiq:
        cpu: 100m
        memory: 100Mi
        replicas: 1
    pg:
      cpu: 100m
      memory: 100Mi
    minio:
      cpu: 100m
      memory: 100Mi
    es:
      cpu: 100m
      memory: 100Mi
    hyper:
      cpu: 100m
      memory: 200Mi
    elastalert:
      cpu: 100m
      memory: 100Mi
    prometheus:
      cpu: 100m
      memory: 100Mi
    redis:
      cpu: 100m
      memory: 100Mi
debug: "false"
dumpDir: ""
otags: "all"
dryRun: "false"
clusterDomain: ""

tenancy:
  enabled: "false"
  dedicatedNodes: "false"
  cnvrg:
    key: "cnvrg-taint"
    value: "true"

networking:
  enabled: "true"
  ingressType: "istio" # openshift | istio | k8singress | nodeport
  https:
    enabled: "false"
    cert: ""
    key: ""
    certSecret: "" #istio

  istio:
    enabled: "true"
    operatorImage: "docker.io/istio/operator:1.8.1"
    hub: "docker.io/istio"
    tag: "1.8.1"
    proxyImage: "proxyv2"
    mixerImage: "mixer"
    pilotImage: "pilot"
    gwName: "cnvrg-gateway"
    externalIp: "" # if externalIp is set the Istio service type will be: ClusterIP with provided external IPs
    ingressSvcAnnotations: ""  # https://gist.github.com/mgoodness/1a2926f3b02d8e8149c224d25cc57dc1, https://kubernetes.io/docs/concepts/cluster-administration/cloud-providers/
    loadBalancerSourceRanges: ""
  ingress:
    enabled: "true"
    timeout: 18000s #  15min = retries_attempts * per_try_timeout
    retriesAttempts: 5
    perTryTimeout: 3600s

redis:
  enabled: "true"
  image: docker.io/cnvrg/cnvrg-redis:v3.0.5.c2
  svcName: redis
  port: 6379
  limits:
    cpu: 1
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi

pg:
  enabled: "true"
  image: centos/postgresql-12-centos7
  port: 5432
  storageSize: 80Gi
  svcName: postgres
  dbname: cnvrg_production
  pass: pg_pass
  user: cnvrg
  runAsUser: 26
  runAsGroup: 26
  fsGroup: 26
  storageClass: use-default
  hugePages:
    enabled: "false"
    size: "2Mi" # 2Mi,1Gi,etc... https://kubernetes.io/docs/tasks/manage-hugepages/scheduling-hugepages/, https://www.thegeekdiary.com/centos-rhel-67-how-to-configure-hugepages/, https://wiki.debian.org/Hugepages#pages-size
    memory: "" # how much memory to request in hugePages, if this empty, memoryRequest will be used, meaning - by default 2048 pages of 2Mi size should be allocatable and free in the cluster.

pgBackup:
  storageSize: 30Gi
  enabled: "false"
  name: pg-backup
  path: /opt/cnvrg-backups
  scriptPath: /opt/script
  storageClass: use-default
  cronTime: "1 1 * * *"

minio:
  enabled: "true"
  replicas: 1
  image: docker.io/minio/minio:RELEASE.2020-09-17T04-49-20Z
  port: 9000
  storageSize: 100Gi
  svcName: minio
  nodePort: 30090
  storageClass: use-default
  cpuRequest: 2
  memoryRequest: 4Gi
  sharedStorage:
    enabled: "false"

logging:
  enabled: "true"
  es:
    enabled: "true"
    image: "docker.io/cnvrg/cnvrg-es:v7.8.1"
    maxMapImage: "docker.io/cnvrg/cnvrg-tools:v0.3"
    port: "9200"
    storageSize: 30Gi
    svcName: elasticsearch
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    patchEsNodes: "true"
    nodePort: 32200
    storageClass: use-default
    cpuRequest: 1
    memoryRequest: 1Gi
    cpuLimit: 2
    memoryLimit: 4Gi
    javaOpts: ""
  elastalert:
    enabled: "true"
    image: "bitsensor/elastalert:3.0.0-beta.1"
    port: "80"
    nodePort: 32030
    containerPort: "3030"
    svcName: "elastalert"
    storageClass: "use-default"
    cpuRequest: 100m
    memoryRequest: 200Mi
    cpuLimit: 1
    memoryLimit: 2Gi
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
  kibana:
    enabled: "true"
    svcName: kibana
    port: 5601
    image: "docker.elastic.co/kibana/kibana-oss:7.8.1"
    nodePort: 30601
    cpuRequest: 500m
    memoryRequest: 500Mi
    cpuLimit: 1
    memoryLimit: 2000Mi
  fluentd:
    enabled: "true"
    image: "fluent/fluentd-kubernetes-daemonset:v1.11-debian-elasticsearch7-1"
    journalPath: /var/log/journal
    containersPath: /var/lib/docker/containers
    journald: "false"
    cpuRequest: 100m
    memoryRequest: 200Mi
    memoryLimit: 200Mi

monitoring:
  enabled: "true"
  prometheusOperator:
    enabled: "true"
    images:
      operatorImage: "quay.io/coreos/prometheus-operator:v0.40.0"
      configReloaderImage: "jimmidyson/configmap-reload:v0.3.0"
      prometheusConfigReloaderImage: "quay.io/coreos/prometheus-config-reloader:v0.40.0"
      kubeRbacProxyImage: "quay.io/coreos/kube-rbac-proxy:v0.4.1"
  prometheus:
    enabled: "true"
    image: "quay.io/prometheus/prometheus:v2.22.2"
    cpuRequest: 1
    memoryRequest: 1Gi
    svcName: "prometheus"
    port: 9090
    nodePort: 30909
    storageSize: 100Gi
    storageClass: "use-default"
  nodeExporter:
    enabled: "true"
    image: "quay.io/prometheus/node-exporter:v0.18.1"
    port: 9100
  kubeStateMetrics:
    enabled: "true"
    image: "quay.io/coreos/kube-state-metrics:v1.9.5"
  grafana:
    enabled: "true"
    image: grafana/grafana:7.2.0
    svcName: "grafana"
    port: 3000
    nodePort: 30012
  defaultServiceMonitors:
    enabled: "true"
  sidekiqExporter:
    enabled: "true"
    image: "docker.io/strech/sidekiq-prometheus-exporter:0.1.13"
  minioExporter:
    enabled: "true"
    image: "docker.io/cnvrg/cnvrg-boot:v0.24"
  dcgmExporter:
    enabled: "true"
    image: "nvidia/dcgm-exporter:1.7.2"
    port: 9400
  idleMetricsExporter:
    enabled: "true"
  metricsServer:
    enabled: "true"
    image: "k8s.gcr.io/metrics-server/metrics-server:v0.3.7"

nvidiadp:
  enabled: "true"
  image: nvidia/k8s-device-plugin:v0.7.0
  nodeSelector:
    enabled: "true"
    key: accelerator
    value: nvidia

mpi:
  enabled: "true"
  image: "mpioperator/mpi-operator:v0.2.3"
  kubectlDeliveryImage: "mpioperator/kubectl-delivery:v0.2.3"
  registry:
    name: "mpi-private-registry"
    url: "docker.io"
    user: ""
    password: ""
  addlArgs: []

cnvrgApp:
  replicas: 1
  sidekiqReplicas: 2
  enabled: "true"
  fixpg: "true"
  image: "cnvrg/core:3.6.99"
  port: 8080
  cpu: 4
  memory: 4Gi
  svcName: app
  nodePort: 30080
  passengerMaxPoolSize: 20
  enableReadinessProbe: "true"
  initialDelaySeconds: 10
  readinessPeriodSeconds: 25
  readinessTimeoutSeconds: 20
  failureThreshold: 4
  resourcesRequestEnabled: "true"
  sidekiq:
    enabled: "true"
    split: "true"
  searchkiq:
    enabled: "true"
  systemkiq:
    enabled: "true"
  kiqPrestopHook:
    enabled: "true"
    killTimeout: 60
  seeder:
    image: "docker.io/cnvrg/cnvrg-boot:v0.25"
    seedCmd: "rails db:migrate && rails db:seed && rails libraries:update"
  hyper:
    enabled: "true"
    image: "cnvrg/hyper-server:latest"
    port: 5050
    nodePort: 30050
    svcName: "hyper"
    cpuRequest: 100m
    memoryRequest: 200Mi
    cpuLimit: 2
    memoryLimit: 4Gi
    replicas: 1
    token: "token"
    enableReadinessProbe: "true"
    readinessPeriodSeconds: 100
    readinessTimeoutSeconds: 60
  conf:
    gcpStorageSecret: "gcp-storage-secret"
    gcpKeyfileMountPath: "/tmp/gcp_keyfile"
    gcpKeyfileName: "key.json"
    jobsStorageClass: ""
    featureFlags: ""
    sentryUrl: "https://4409141e4a204282bd1f5c021e587509:dc15f684faa9479a839cf913b98b4ee2@sentry.cnvrg.io/32"
    secretKeyBase: "0d2b33c2cc19cfaa838d3c354354a18fcc92beaaa8e97889ef99341c8aaf963ad3afcf0f7c20454cabb5c573c3fc35b60221034e109f4fb651ed1415bf61e9d5"
    stsIv: "DeJ/CGz/Hkb/IbRe4t1xLg=="
    stsKey: "05646d3cbf8baa5be7150b4283eda07d"
    passengerAppEnv: "app"
    railsEnv: "app"
    runJobsOnSelfCluster: "true"
    defaultComputeConfig: "/opt/kube"
    defaultComputeName: "default"
    useStdout: "true"
    extractTagsFromCmd: "false"
    checkJobExpiration: "true"
    cnvrgStorageType: "minio"
    cnvrgStorageBucket: "cnvrg-storage"
    cnvrgStorageAccessKey: "AKIAIOSFODNN7EXAMPLE"
    cnvrgStorageSecretKey: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
    cnvrgStorageEndpoint: "default"
    minioSseMasterKey: "my-minio-key:a310aadcefdb634b748ae31225f175e3f64591f955dfc66ccc20e128a6817ff9"
    cnvrgStorageAzureAccessKey: ""
    cnvrgStorageAzureAccountName: ""
    cnvrgStorageAzureContainer: ""
    cnvrgStorageRegion: "eastus"
    cnvrgStorageProject: ""
    customAgentTag: "false"
    intercom: "true"
    splitSidekiq: "true"
    ldap:
      enabled: ""
      host: ""
      port: ""
      account: "userPrincipalName"
      base: "" # dc=my-domain,dc=local
      adminUser: ""
      adminPassword: ""
      ssl: "" # true/false
    registry:
      name: cnvrg-registry
      url: "docker.io"
      user: ""
      password: ""

    rbac:
      role: "cnvrg-role"
      serviceAccountName: "cnvrg"
      roleBindingName: "cnvrg-role-binding"

    smtp:
      server: ""
      port: ""
      username: ""
      password: ""
      domain: ""

  cnvrgRouter:
    enabled: "false"
    image: nginx
    svcName: routing-service
    nodePort: 30081
    port: 80

storage:
  enabled: "false"
  ccpStorageClass: ""
  nfs:
    enabled: "false"
    image: "quay.io/external_storage/nfs-client-provisioner:latest"
    provisioner: cnvrg.io/ifs
    storageClassName: "cnvrg-nfs-storage"
    server: ""
    path: ""
    cpuRequest: 100m
    memoryRequest: 100Mi
    cpuLimit: 200m
    memoryLimit: 200Mi
    reclaimPolicy: "Delete"
    defaultSc: "false"

  hostpath:
    enabled: "false"
    image: "quay.io/kubevirt/hostpath-provisioner"
    hostPath: /cnvrg-storage
    storageClassName: "cnvrg-hostpath-storage"
    nodeName: ""
    cpuRequest: 100m
    memoryRequest: 100Mi
    cpuLimit: 200m
    memoryLimit: 200Mi
    reclaimPolicy: "Retain"
    defaultSc: "false"

vpa:
  enabled: "false"
  images:
    admissionImage: "k8s.gcr.io/autoscaling/vpa-admission-controller:0.9.0"
    recommenderImage: "k8s.gcr.io/autoscaling/vpa-recommender:0.9.0"
    updaterImage: "k8s.gcr.io/autoscaling/vpa-updater:0.9.0"

cnvrgClusterToken:
  enabled: "true"
