createNs: true
operatorImage: docker.io/cnvrg/cnvrg-operator
hookImage: "docker.io/cnvrg/cnvrg-tools:v0.3"
specProfile: default
computeProfile: medium
storageProfile: default
computeProfiles:
  large:
    storage: 100Gi
    cnvrgApp:
      webappCpu: 4
      webappMemory: 8Gi
      sidekiqCpu: 4
      sidekiqMemory: 8Gi
      searchkiqCpu: 1
      searchkiqMemory: 2Gi
      sidekiqReplicas: 2
      searchkiqReplicas: 1
    pg:
      cpu: 4
      memory: 8Gi
    minio:
      cpu: 2
      memory: 4Gi
    es:
      cpu: 1
      memory: 1Gi
    prometheus:
      cpu: 1
      memory: 1Gi
    redis:
      cpu: 500m
      memory: 1Gi
  medium:
    storage: 100Gi
    cnvrgApp:
      webappCpu: 2
      webappMemory: 4Gi
      sidekiqCpu: 2
      sidekiqMemory: 4Gi
      searchkiqCpu: 1
      searchkiqMemory: 1Gi
      sidekiqReplicas: 2
      searchkiqReplicas: 1
    pg:
      cpu: 2
      memory: 4Gi
    minio:
      cpu: 1
      memory: 2Gi
    es:
      cpu: 1
      memory: 1Gi
    prometheus:
      cpu: 1
      memory: 1Gi
    redis:
      cpu: 500m
      memory: 1Gi
  small:
    storage: 3Gi
    cnvrgApp:
      webappCpu: 100m
      webappMemory: 100Mi
      sidekiqCpu: 100m
      sidekiqMemory: 100Mi
      searchkiqCpu: 100m
      searchkiqMemory: 100Mi
      sidekiqReplicas: 1
      searchkiqReplicas: 1
    pg:
      cpu: 100m
      memory: 100Mi
    minio:
      cpu: 100m
      memory: 100Mi
    es:
      cpu: 100m
      memory: 100Mi
    prometheus:
      cpu: 100m
      memory: 100Mi
    redis:
      cpu: 100m
      memory: 100Mi

debug: "false"
dumpDir: ""
dryRun: "false"
privilegedSa: cnvrg-privileged
clusterDomain: ""
useHttps: "false"
orchestrator: k8s
securityMode: default
ingressType: istio
tenancy:
  enabled: "false"
  dedicatedNodes: "false"
  cnvrg:
    key: "cnvrg-taint"
    value: "true"
https:
  enabled: "false"
  useWildcardCertificate: "true"
  cert: ""
  key: ""
  certSecret: ""
conf:
  enabled: "true"
  gcpStorageSecret: gcp-storage-secret
  gcpKeyfileMountPath: /tmp/gcp_keyfile
  gcpKeyfileName: key.json
registry:
  name: cnvrg-registry
  url: "docker.io"
  user: ""
  password: ""
rbac:
  role: cnvrg-role
  serviceAccountName: cnvrg
  roleBindingName: cnvrg-role-binding
appConfigs:
  cnvrgStorageUseIamRole: "false"
  featureFlags: ""
  smtp:
    server: ""
    port: ""
    username: ""
    password: ""
    domain: ""
appSecrets:
  sentryUrl: https://4409141e4a204282bd1f5c021e587509:dc15f684faa9479a839cf913b98b4ee2@sentry.cnvrg.io/32
  secretKeyBase: 0d2b33c2cc19cfaa838d3c354354a18fcc92beaaa8e97889ef99341c8aaf963ad3afcf0f7c20454cabb5c573c3fc35b60221034e109f4fb651ed1415bf61e9d5
  stsIv: DeJ/CGz/Hkb/IbRe4t1xLg==
  stsKey: 05646d3cbf8baa5be7150b4283eda07d
  passengerAppEnv: app
  railsEnv: app
  runJobsOnSelfCluster: "true"
  defaultComputeConfig: /opt/kube
  defaultComputeName: default
  useStdout: "true"
  extractTagsFromCmd: "false"
  checkJobExpiration: "true"
  cnvrgStorageType: minio
  cnvrgStorageEndpoint: "default"
  cnvrgStorageBucket: cnvrg-storage
  cnvrgStorageAccessKey: "AKIAIOSFODNN7EXAMPLE"
  cnvrgStorageSecretKey: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
  minioSseMasterKey: "my-minio-key:a310aadcefdb634b748ae31225f175e3f64591f955dfc66ccc20e128a6817ff9"
  cnvrgStorageAzureAccessKey: ""
  cnvrgStorageAzureAccountName: ""
  cnvrgStorageAzureContainer: ""
  cnvrgStorageRegion: eastus
  cnvrgStorageProject: ""
redis:
  enabled: "true"
  image: redis:3.0.5
  svcName: redis
  port: 6379
  limits:
    cpu: 1
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi
pg:
  enabled: "true"
  image: centos/postgresql-12-centos7
  port: 5432
  storageSize: 80Gi
  svcName: postgres
  dbname: cnvrg_production
  pass: pg_pass
  user: cnvrg
  runAsUser: 26
  runAsGroup: 26
  fsGroup: 26
  storageClass: use-default
  cpuRequest: 4
  memoryRequest: 8Gi
pgBackup:
  storageSize: 30Gi
  enabled: "false"
  name: pg-backup
  path: /opt/cnvrg-backups
  scriptPath: /opt/script
  storageClass: use-default
  cronTime: "1 1 * * *"
es:
  enabled: "true"
  image: "docker.io/cnvrg/cnvrg-es:v7.8.1"
  maxMapImage: "docker.io/cnvrg/cnvrg-tools:v0.3"
  port: "9200"
  storageSize: 30Gi
  svcName: elasticsearch
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  patchEsNodes: "true"
  nodePort: 32200
  storageClass: use-default
  cpuRequest: 1
  memoryRequest: 1Gi
  cpuLimit: 2
  memoryLimit: 4Gi
  javaOpts: ""
minio:
  enabled: "true"
  replicas: 1
  image: docker.io/minio/minio:RELEASE.2020-09-17T04-49-20Z
  port: 9000
  storageSize: 100Gi
  svcName: minio
  nodePort: 30090
  storageClass: use-default
  cpuRequest: 2
  memoryRequest: 4Gi
  sharedStorage:
    enabled: "false"
    storageClassName: "minio-shared-backend"
    nfsServer: ""
    path: ""
prometheus:
  enabled: "true"
  image: "quay.io/prometheus/prometheus:v2.17.2"
  operatorImage: "quay.io/coreos/prometheus-operator:v0.38.1"
  configReloaderImage: "jimmidyson/configmap-reload:v0.3.0"
  prometheusConfigReloaderImage: "quay.io/coreos/prometheus-config-reloader:v0.38.1"
  kubeRbacProxyImage: "quay.io/coreos/kube-rbac-proxy:v0.4.1"
  kubeStateMetricsImage: "quay.io/coreos/kube-state-metrics:v1.9.5"
  alertManagerImage: "quay.io/prometheus/alertmanager:v0.20.0"
  adapterImage: "directxman12/k8s-prometheus-adapter:v0.7.0"
  nvidiaExporterImage: "nvidia/dcgm-exporter:1.7.2"
  nodeExporterImage: "quay.io/prometheus/node-exporter:v0.18.1"
  sidekickExporterImage: "docker.io/strech/sidekiq-prometheus-exporter:0.1.13"
  cnvrgBootImage: "docker.io/cnvrg/cnvrg-boot:v0.24"
  svcName: prometheus
  port: 9090
  nodePort: 30909
  storageSize: 40Gi
  storageClass: use-default
  cpuRequest: 1
  memoryRequest: 1Gi
  kubeletMetrics:
    schema: https
    port: https-metrics
grafana:
  svcName: grafana
  port: 3000
  image: grafana/grafana:6.7.4
  nodePort: 30012
istio:
  enabled: "true"
  operatorImage: "docker.io/istio/operator:1.7.3"
  hub: "docker.io/istio"
  tag: "1.7.3"
  proxyImage: "proxyv2"
  mixerImage: "mixer"
  pilotImage: "pilot"
  gwName: cnvrg-gateway
  externalIp: ""
  ingressSvcAnnotations: ""
kibana:
  enabled: "true"
  svcName: kibana
  port: 5601
  image: "docker.elastic.co/kibana/kibana-oss:7.8.1"
  nodePort: 30601
  cpuRequest: 500m
  memoryRequest: 500Mi
  cpuLimit: 1
  memoryLimit: 2000Mi
fluentd:
  enabled: "true"
  image: "fluent/fluentd-kubernetes-daemonset:v1.11.0-debian-elasticsearch6-1.0"
  journalPath: /var/log/journal
  containersPath: /var/lib/docker/containers
  journald: "false"
  cpuRequest: 100m
  memoryRequest: 200Mi
  memoryLimit: 200Mi
nvidiadp:
  enabled: "true"
  image: nvidia/k8s-device-plugin:v0.7.0
  nodeSelector:
    enabled: "true"
    key: accelerator
    value: nvidia
mpi:
  enabled: "true"
  image: "mpioperator/mpi-operator:v0.2.3"
  kubectlDeliveryImage: "mpioperator/kubectl-delivery:v0.2.3"
  registry:
    name: "mpi-private-registry"
    url: "docker.io"
    user: ""
    password: ""
cnvrgApp:
  replicas: 1
  sidekiqReplicas: 2
  edition: core
  enabled: "true"
  fixpg: "true"
  image: "cnvrg/core:3.1.2"
  port: 80
  cpu: 4
  memory: 4Gi
  svcName: app
  customAgentTag: "false"
  intercom: "true"
  nodePort: 30080
  sidekiqCpu: 2
  sidekiqMemory: 4Gi
  sidekiqSearchkickCpu: 1
  sidekiqSearchkickMemory: 2Gi
  sidekiqSearchkickReplicas: 1
  passengerMaxPoolSize: 20
  enableReadinessProbe: "true"
  readinessPeriodSeconds: 100
  readinessTimeoutSeconds: 60
seeder:
  image: docker.io/cnvrg/cnvrg-boot:v0.23
  seedCmd: rails db:migrate && rails db:seed && rails libraries:update
nfs:
  enabled: "false"
  image: "quay.io/external_storage/nfs-client-provisioner:latest"
  provisioner: cnvrg.io/ifs
  storageClassName: cnvrg-nfs-storage
  server: ""
  path: ""
  cpuRequest: 100m
  memoryRequest: 100Mi
  cpuLimit: 200m
  memoryLimit: 200Mi
hostpath:
  enabled: "false"
  image: "quay.io/kubevirt/hostpath-provisioner"
  hostPath: /cnvrg-storage
  storageClassName: cnvrg-hostpath-provisioner
  nodeName: ""
  cpuRequest: 100m
  memoryRequest: 100Mi
  cpuLimit: 200m
  memoryLimit: 200Mi
autoscaler:
  enabled: "false"
ingress:
  enabled: "true"
cnvrgRouter:
  enabled: "false"
  image: nginx
  svcName: routing-service
  nodePort: 30081
  port: 80
